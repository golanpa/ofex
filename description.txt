OpenFlow exercise part B:

The code for this part enhances part A by eliminating layer 2 cycles. It does that by computing a spanning tree over
the active links of the network, edges, and neutralizing those who are not in the resulting tree.

A. Learn the topology:
    1. This part is implemented by a dedicated class named "Discovery".


    "Discovery" class is responsible for topology discovery. This class is implemented as a singleton.

    This class registers to pox dependencies events in order to track switches and LLDP packets. It does that in order
    to maintain a list of active link in the network.

    When registered, the Discovery singleton does that while specifying high priority in order to get these messages as
    soon as possible and before any other listener gets them.

    This class notifies its listeners in case the network topology has changed. This occurs when a new link is
    discovered or when links are removed due to long inactivity or when a switch is down.

    2. In order to send LLDP messages to its neighbours, the Discovery class uses a single object for this task.
    This object is of "LLDPMessageBroker" type.


    "LLDPMessageBroker" class is only responsible for sending LLDP discovery packets.

    This class registers to pox dependencies events in order to track switch and ports status. It does that because it
    needs to know which ports are active so it can send its neighbouring switches LLDP discovery messages via these
    ports. There is only one instance of this class.

    When it discovers an active port, it prepares an LLDP packet for it.

    Using a timer, this class sends the next LLDP message to its neighbour, using "double buffer" technique (maintains
    two lists: one for sending messages for known ports - current -  and the other for sending messages to port that
               were added while sending to ports in the current list).


    3. Upon switch up event, the Discovery singleton installs a special rule directing all LLDP packets to it.
    When a LLDP packet arrives it checked. If its from an unknown switch it is considered as new link and an event
    is fires indicating that topology has changed.

    4. After processing an LLDP packet, the handler returns EventHalt code indicating that this message should not be
    further processed by any other listener, thus, preventing from Tutorial class objects to handle LLDP messages
    (remember that the Discovery singleton has registered to dependencies events with the highest priority).

    5-7. The Discovery singleton maintains a time stamp for each link discovered by LLDP messages. Using a timer, each link
    timestamp is periodically checked in order to determine if the link has became inactive. If so, this link is removed
    and an event is fired for the listeners indicating that topology has changed. The scan is made every 3 seconds
    and removes links which are inactive for 6 seconds.

    When a neighboring switch goes down, all links to it a re removed and an event is fired for the listeners indicating
    that topology has changed.


B. Find a Spanning Tree:
    The discovery singleton also holds a reverence to an object of type "PortAuthorizer".

    The "PortAuthorizer" class builds a graph of the network out of the active links maintained by the discovery
    singleton. There is only one instance of this class.

    This class, registers and listens to topology changed events fired by the Discovery singleton, and updates the
    network graph for each change.

    When constructing the graph, only edges for which two opposite directional links exists are considered: if A, B
    are switches and only the link A->B was discovered then an edge connecting between A and B will not appear in the
    graph. Only if the link B->A also exists then an edge will appear in the graph.

    After the graph is re-calculated, a spanning tree for this graph is created. The spanning tree is created using
    Kruskal's algorithm using disjoint sets and tree based union-find data structure.

    After the spanning tree is created, it is scanned and all the ports that appears in it are considered valid. Other
    ports are considered as forbidden. Ports which are connected to hosts are always being considered as valid ones.


C. Change your switch behavior to avoid sending on forbidden links:
    - If PortAuthorizer object, after scanning the spanning tree, finds that a port is found to be forbidden,
    then it send switch modification message to uninstall all flows directing traffic to that port (these flows are
    not valid anymore).

    -  If PortAuthorizer object, after scanning the spanning tree, finds that a port is found to be forbidden, then it
    sends a port modification message turning off its flooding capabilities so it want participate in any flood
    commands. Otherwise, the flood capability of the port is turned on.

    In order to minimize port modification messages in the system, the current state is maintained in memory and only
    a real change in the validity status of the port will trigger such a port configuration change message.

    - The PortAuthorizer object is responsible for notifying all its listeners (Tutorial objects) when port status
    validity has changed. Upon receiving this event, any Tutorial object which registered as listener, process it.

    If the port is considered as forbidden and invalid then the Tutorial objects delete all sources coming from this
    port from their in-memory mapping.





